import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BotCommand, Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import asyncio
import requests
import re
from html import escape
from config import MAIN_ADMIN_ID, login_token, password_token

from utils.states import Form
from utils.helpers import (
    menu_keyboard, links_keyboard, registration_keyboard,
    re_registration_keyboard, cancel_keyboard, broadcast_decision_keyboard,
    check_ban, send_menu, send_media_preview, is_user_banned,
    add_banned_user, remove_banned_user, load_banned_users
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API
scope = ['https://spreadsheets.google.com/feeds',
         'https://www.googleapis.com/auth/drive']

dp = Dispatcher()
BANNED_USERS_FILE = "banned_users.txt"

@dp.message(Command("ban"))
async def cmd_ban(message: Message):
    if message.from_user.id != int(MAIN_ADMIN_ID):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ‚õî")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /ban <–ª–æ–≥–∏–Ω/ID>:")
        return

    target = args[1]
    user_id = None

    if target.isdigit():
        user_id = int(target)
        user_data = await dp["google_sheets_service"].is_user_in_db(user_id)
        if not user_data:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω üîç")
            return
    else:
        user_info = await dp["google_sheets_service"].find_user_by_login(target)
        if not user_info:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º {target} –Ω–µ –Ω–∞–π–¥–µ–Ω üîç")
            return
        user_id = user_info[0]

    add_banned_user(user_id)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} (ID: {user_id}) –∑–∞–±–∞–Ω–µ–Ω ‚òëÔ∏è")


@dp.message(Command("unban"))
async def cmd_unban(message: Message):
    if message.from_user.id != int(MAIN_ADMIN_ID):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ‚õî")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /unban <–ª–æ–≥–∏–Ω/ID> ‚úèÔ∏è")
        return

    target = args[1]
    user_id = None

    if target.isdigit():
        user_id = int(target)
        user_data = await dp["google_sheets_service"].is_user_in_db(user_id)
        if not user_data:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω üîç")
            return
    else:
        user_info = await dp["google_sheets_service"].find_user_by_login(target)
        if not user_info:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º {target} –Ω–µ –Ω–∞–π–¥–µ–Ω üîç")
            return
        user_id = user_info[0]

    remove_banned_user(user_id)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} (ID: {user_id}) —Ä–∞–∑–±–∞–Ω–µ–Ω ‚òëÔ∏è")



@dp.message(Command("broadcast"))
async def cmd_broadcast(message: Message, state: FSMContext):
    if message.from_user.id != int(MAIN_ADMIN_ID):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ‚õî")
        return
    await state.set_state(Form.waiting_for_broadcast)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

@dp.message(Form.waiting_for_broadcast)
async def process_broadcast(message: Message, state: FSMContext):
    if not message.text and not message.photo and not message.document and not message.video:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º üõë\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞:")
        return

    await state.update_data(broadcast_message=message)
    await state.set_state(Form.waiting_for_broadcast_confirm)
    await send_media_preview(message, message.chat.id)
    await message.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:", reply_markup=broadcast_decision_keyboard())


@dp.callback_query(F.data == "broadcast_confirm", Form.waiting_for_broadcast_confirm)
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    broadcast_message = data.get("broadcast_message")
    users = await dp["google_sheets_service"].get_users()
    success = 0
    failed = 0
    from_chat_id = broadcast_message.chat.id
    message_id = broadcast_message.message_id

    for user_id in users:
        try:
            await dp.bot.copy_message(user_id, from_chat_id, message_id)
            success += 1
        except Exception as e:
            failed += 1
        await asyncio.sleep(0.1)

    await dp.bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await callback.message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚òëÔ∏è\n—É—Å–ø–µ—à–Ω–æ: {success}\n–Ω–µ —É–¥–∞–ª–æ—Å—å: {failed}")
    await state.clear()

@dp.callback_query(F.data == "broadcast_cancel", Form.waiting_for_broadcast_confirm)
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    await dp.bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚úñÔ∏è")
    await state.clear()



@dp.message(CommandStart())
async def cmd_start(message: Message):
    if is_user_banned(message.from_user.id):
        await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ üö´")
        return

    user_data = await dp["google_sheets_service"].is_user_in_db(message.from_user.id)
    if user_data:
        login, name = user_data
        await message.answer(
            f"""<b>–ü—Ä–∏–≤–µ—Ç, {name}! üëãüèª</b>
–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –®–∫–æ–ª—ã 21 YKS ü¶£

<b>–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ–µ—Ç –±–æ—Ç?</b>

    ‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ \n<i>–≥–∞–π–¥ –ø–æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ/—Ñ–æ—Ä–º–∞ –≥–æ—Å—Ç—è –∏ —Ç.–¥.</i>

    ‚Ä¢ –ù–∞–π—Ç–∏ –ø–∏—Ä–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ \n<i>—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –ø–∏—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ</i>

    ‚Ä¢ –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏—Ä—É \n<i>—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –ø–∏—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ</i>

    ‚Ä¢ –£–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–π—á–∞—Å –≤ –∫–∞–º–ø—É—Å–µ \n<i>–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤ –≤ –∫–∞–º–ø—É—Å–µ</i>

<b>–î–∞–≤–∞–π—Ç–µ –±—ã—Ç—å –Ω–∞ –æ–¥–Ω–æ–π –≤–æ–ª–Ω–µ!</b> üåä""",
            reply_markup=menu_keyboard(), parse_mode="HTML"
        )
    else:
        await message.answer(
            """<b>–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üìù</b>

<b>–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ–µ—Ç –±–æ—Ç?</b>

    ‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ \n<i>–≥–∞–π–¥ –ø–æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ/—Ñ–æ—Ä–º–∞ –≥–æ—Å—Ç—è –∏ —Ç.–¥.</i>

    ‚Ä¢ –ù–∞–π—Ç–∏ –ø–∏—Ä–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ \n<i>—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –ø–∏—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ</i>

    ‚Ä¢ –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏—Ä—É \n<i>—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –ø–∏—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ</i>

    ‚Ä¢ –£–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–π—á–∞—Å –≤ –∫–∞–º–ø—É—Å–µ <i>–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤ –≤ –∫–∞–º–ø—É—Å–µ</i>

<b>–î–∞–≤–∞–π—Ç–µ –±—ã—Ç—å –Ω–∞ –æ–¥–Ω–æ–π –≤–æ–ª–Ω–µ!</b> üåä""",
            reply_markup=registration_keyboard(), parse_mode="HTML"
        )

@dp.message(Command("wanted"))
async def wanted_message(message: Message, state: FSMContext):
    user_data = await dp["google_sheets_service"].get_user_record(message.from_user.id)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    current_wanted = user_data.get('wanted', '')
    if current_wanted:
        await message.answer(
            f"–í—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –ø–∏—Ä–∞: <b>{current_wanted}</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω</b> –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é üëÄ",
                parse_mode="HTML",
                reply_markup=cancel_keyboard()
                             )
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–∏—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")

    await state.set_state(Form.wanted)

@dp.message(Form.wanted)
async def process_wanted(message: Message, state: FSMContext):
    login = message.text.strip()

    if not re.fullmatch(r'^[a-z]{8}$', login):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 8 –º–∞–ª–µ–Ω—å–∫–∏—Ö –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ ‚ùå")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∏—Ä –≤ –±–∞–∑–µ
    all_records = dp["google_sheets_service"].sheet.get_all_records()
    peer_exists = any(record.get('login') == login for record in all_records)

    if not peer_exists:
        await message.answer("–ü–∏—Ä —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if await dp["google_sheets_service"].update_user_wanted(message.from_user.id, login):
        await message.answer(f"–¢–µ–ø–µ—Ä—å –≤—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –ø–∏—Ä–∞: \n<b>{login}</b>", parse_mode="HTML")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚ùå")

    await state.clear()

@dp.message(Command("links"))
async def cmd_links_message(message: Message):
    if await check_ban(message.from_user.id, message=message):
        return
    await message.answer('–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:', reply_markup=links_keyboard())

@dp.callback_query(F.data == "links")
async def cmd_links(callback: CallbackQuery):
    if await check_ban(callback.from_user.id, callback=callback):
        return
    await callback.message.answer('–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:', reply_markup=links_keyboard())
    await callback.answer()


@dp.callback_query(F.data == "faq")
async def cmd_faq(callback: CallbackQuery):
    await callback.message.answer('FAQ –®–∫–æ–ª—ã 21\nhttps://applicant.21-school.ru/faq')
    await callback.answer()

@dp.callback_query(F.data == "rules")
async def cmd_rules(callback: CallbackQuery):
    await callback.message.answer('–ü—Ä–∞–≤–∏–ª–∞ –®–∫–æ–ª—ã 21\nhttps://applicant.21-school.ru/rules_yak')
    await callback.answer()

@dp.callback_query(F.data == "rocketchat")
async def cmd_rocketchat(callback: CallbackQuery):
    await callback.message.answer('–ü—Ä–∞–≤–∏–ª–∞ –†–æ–∫–µ—Ç—á–∞—Ç–∞\nhttps://applicant.21-school.ru/rocketchat')
    await callback.answer()

@dp.callback_query(F.data == "internship_guide")
async def cmd_internship_guide(callback: CallbackQuery):
    await callback.message.answer('–ì–∞–π–¥ –ø–æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ\nhttps://applicant.21-school.ru/internship_guide')
    await callback.answer()

@dp.callback_query(F.data == "specialties")
async def cmd_specialties(callback: CallbackQuery):
    await callback.message.answer('–°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏\nhttps://applicant.21-school.ru/specialties')
    await callback.answer()

@dp.callback_query(F.data == "gigacode")
async def cmd_gigacode(callback: CallbackQuery):
    await callback.message.answer('–û–±—â–∞—è –ø–æ–∑–∏—Ü–∏—è ¬´–®–∫–æ–ª—ã 21¬ª –≤ –ò–ò\nhttps://applicant.21-school.ru/gigacode')
    await callback.answer()

@dp.callback_query(F.data == "p2p")
async def cmd_p2p(callback: CallbackQuery):
    await callback.message.answer('–ü—Ä–∞–≤–∏–ª–∞ –æ–Ω–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–æ–∫\nhttps://applicant.21-school.ru/onlineeducation')
    await callback.answer()

@dp.callback_query(F.data == "codereview")
async def cmd_codereview(callback: CallbackQuery):
    await callback.message.answer('–ì–∞–π–¥ –ø–æ –ö–æ–¥ –†–µ–≤—å—é\nhttps://applicant.21-school.ru/code_review')
    await callback.answer()

@dp.callback_query(F.data == "final")
async def cmd_final(callback: CallbackQuery):
    await callback.message.answer('–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤—ã–ø—É—Å–∫–∞\nhttps://applicant.21-school.ru/final')
    await callback.answer()

@dp.callback_query(F.data == "email")
async def cmd_email(callback: CallbackQuery):
    await callback.message.answer('–ü–æ—á—Ç–∞ –®–∫–æ–ª—ã 21 YKS\nyks@21-school.ru\n–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è\nhttps://applicant.21-school.ru/sla')
    await callback.answer()

@dp.callback_query(F.data == "coins")
async def cmd_coins(callback: CallbackQuery):
    await callback.message.answer('–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–∏–Ω—ã\nhttps://applicant.21-school.ru/manual_points')
    await callback.answer()

@dp.callback_query(F.data == "guests")
async def cmd_guests(callback: CallbackQuery):
    await callback.message.answer('–§–æ—Ä–º–∞ –≥–æ—Å—Ç—è\nhttps://forms.yandex.ru/u/65320571068ff019572c037e/\n–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ—Å—Ç–µ–π –≤ –∫–∞–º–ø—É—Å\nhttps://applicant.21-school.ru/guests')
    await callback.answer()

async def get_access_token(login_token: str, password_token: str) -> str:
    url = "https://auth.sberclass.ru/auth/realms/EduPowerKeycloak/protocol/openid-connect/token"
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    data = {
        'client_id': 's21-open-api',
        'username': login_token,
        'password': password_token,
        'grant_type': 'password'
    }
    response = requests.post(url, headers=headers, data=data)
    if response.status_code == 200:
        return response.json().get('access_token')
    return None

async def get_cluster_info(cluster_id: str, token: str) -> dict:
    url = f"https://platform-api.21-school.ru/services/21-school/api/v1/clusters/{cluster_id}/map?limit=100&offset=0"
    headers = {'Authorization': f'Bearer {token}'}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    return None

async def handle_campus_command(message: Message):
    if await check_ban(message.from_user.id, message=message):
        return

    token = await get_access_token(login_token, password_token)
    if not token:
        await message.answer("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ‚ùå\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
        return

    cluster_id_to_name = {
        "36621": "ay",
        "36622": "er",
        "36623": "tu",
        "36624": "si"
    }

    floors = [
        {"clusters": ["36621", "36622"], "name": "2nd Floor"},
        {"clusters": ["36623", "36624"], "name": "3rd Floor"}
    ]

    floor_groups = []

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–∞–∂–∞–º
    for floor in floors:
        floor_results = []
        for cluster_id in floor["clusters"]:
            cluster_info = await get_cluster_info(cluster_id, token)
            if cluster_info:
                cluster_name = cluster_id_to_name.get(cluster_id)
                for participant in cluster_info.get("clusterMap", []):
                    login = participant.get("login")
                    row = participant.get("row")
                    number = participant.get("number")
                    if login is not None:
                        floor_results.append(f"üë§  <b>{login}</b>   {cluster_name}-{row}{number}")

        floor_results.sort(key=lambda x: x.split()[1].lower())
        if floor_results:
            floor_groups.append(floor_results)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —ç—Ç–∞–∂–∞–º–∏
    results = []
    for i, group in enumerate(floor_groups):
        if i > 0:
            results.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        results.extend(group)

    if results:
        chunk_size = 100
        for i in range(0, len(results), chunk_size):
            chunk = "\n".join(results[i:i + chunk_size])
            await message.answer(chunk, parse_mode="HTML")
    else:
        await message.answer("–í –∫–∞–º–ø—É—Å–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç üò≠")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data == "campus")
async def cmd_campus_callback(callback: CallbackQuery):
    await handle_campus_command(callback.message)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("campus"))
async def cmd_campus_message(message: Message):
    await handle_campus_command(message)


@dp.message(Command("search"))
async def cmd_search_message(message: Message, state: FSMContext):
    if await check_ban(message.from_user.id, message=message):
        return
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —à–∫–æ–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    await state.set_state(Form.search)

@dp.callback_query(F.data == "search")
async def cmd_search(callback: CallbackQuery, state: FSMContext):
    if await check_ban(callback.from_user.id, callback=callback):
        return
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —à–∫–æ–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    await state.set_state(Form.search)
    await callback.answer()

async def process_search_common(message: Message, state: FSMContext):
    login = message.text.strip()
    user_data = await dp["google_sheets_service"].find_user_by_login(login)
    if user_data:
        user_id = user_data[0]
        name = escape(user_data[1])
        telegram_username = user_data[2]

        if telegram_username:
            username_escaped = escape(telegram_username)
            text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω ‚úÖ\n\n<b>{name} <a href='tg://user?id={user_id}'>@{username_escaped}</a></b>"
        else:
            text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω ‚úÖ\n\n<b>{name} ID: {user_id}</b>"

        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=menu_keyboard()
        )
        await state.clear()
    else:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùì\n\n–í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –ª–æ–≥–∏–Ω (8 –º–∞–ª–µ–Ω—å–∫–∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤):",
            reply_markup=cancel_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Form.search)
async def process_search(message: Message, state: FSMContext):
    await process_search_common(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.edited_message(Form.search)
async def process_search_edit(edited_message: Message, state: FSMContext):
    await process_search_common(edited_message, state)


async def handle_ref_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    if await check_ban(message.from_user.id, message=message):
        return
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await dp["google_sheets_service"].is_user_in_db(message.from_user.id)

    if user_data:
        login = user_data[0]
        ref_link = f"https://21-school.ru/?utm_source=school21&utm_medium=student_yak&utm_campaign={login}__"
        await message.answer(
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n<code>{ref_link}</code>",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üöÄ",
            reply_markup=registration_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data == "ref")
async def cmd_ref_command(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    if await check_ban(callback.from_user.id, callback=callback):
        return
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await dp["google_sheets_service"].is_user_in_db(callback.from_user.id)

    if user_data:
        login = user_data[0]
        ref_link = f"https://21-school.ru/?utm_source=school21&utm_medium=student_yak&utm_campaign={login}__"
        await callback.message.answer(
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n<code>{ref_link}</code>",
            parse_mode="HTML"
        )
    else:
        await callback.message.answer(
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üöÄ",
            reply_markup=registration_keyboard()
        )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("ref"))
async def cmd_ref_message(message: Message):
    await handle_ref_command(message)



@dp.message(Command("ping"))
async def cmd_ping_message(message: Message, state: FSMContext):
    if await check_ban(message.from_user.id, message=message):
        return
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —à–∫–æ–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    await state.set_state(Form.ping)


@dp.callback_query(F.data == "ping")
async def cmd_ping(callback: CallbackQuery, state: FSMContext):
    if await check_ban(callback.from_user.id, callback=callback):
        return
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —à–∫–æ–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    await state.set_state(Form.ping)
    await callback.answer()

async def process_ping_common(message: Message, state: FSMContext):
    login = message.text.strip()
    user_data = await dp["google_sheets_service"].find_user_by_login(login)
    if user_data:
        sender_data = await dp["google_sheets_service"].is_user_in_db(message.from_user.id)
        if sender_data:
            await message.bot.send_message(
                user_data[0],
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç <b>{sender_data[0]}:</b> üì¢\n\n<b>–£ –Ω–∞—Å –ø—Ä–æ–≤–µ—Ä–∫–∞! üîî</b>",
                parse_mode="HTML"
            )
            await message.answer(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data[1]} ‚úâÔ∏è",
                reply_markup=menu_keyboard()
            )
            await state.clear()
    else:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùì\n\n–í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –ª–æ–≥–∏–Ω (8 –º–∞–ª–µ–Ω—å–∫–∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤):",
            reply_markup=cancel_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Form.ping)
async def process_ping(message: Message, state: FSMContext):
    await process_ping_common(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.edited_message(Form.ping)
async def process_ping_edit(edited_message: Message, state: FSMContext):
    await process_ping_common(edited_message, state)




# @dp.message(Command("register"))
# async def cmd_register(message: Message, state: FSMContext):
#     if await check_ban(message.from_user.id, message=message):
#         return
#     user_data = await is_user_in_db(message.from_user.id)
#     if user_data:
#         await message.answer(
#             f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–∞—à –ª–æ–≥–∏–Ω {user_data[0]} –∏ –∏–º—è {user_data[1]}\n\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?',
#             reply_markup=re_registration_keyboard()
#         )
#     else:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ —à–∫–æ–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω:")
#         await state.set_state(Form.login)

@dp.callback_query(F.data == "register")
async def start_registration(callback: CallbackQuery, state: FSMContext):
    if await check_ban(callback.from_user.id, callback=callback):
        return
    user_data = await dp["google_sheets_service"].is_user_in_db(callback.from_user.id)
    if user_data:
        await callback.message.answer(
            f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–∞—à –ª–æ–≥–∏–Ω {user_data[0]} –∏ –∏–º—è {user_data[1]}\n\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?',
            reply_markup=re_registration_keyboard()
        )
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —à–∫–æ–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω:")
    await state.set_state(Form.login)
    await callback.answer()

@dp.callback_query(F.data == "re_register")
async def re_register(callback: CallbackQuery, state: FSMContext):
    if await check_ban(callback.from_user.id, callback=callback):
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∫–æ–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω:")
    await state.set_state(Form.login)
    await callback.answer()

@dp.message(Form.login)
async def process_login(message: Message, state: FSMContext):
    login = message.text.strip()
    if re.fullmatch(r'^[a-z]{8}$', login):
        await state.update_data(login=login)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(Form.name)
    else:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏–Ω–∞! üö´\n–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 8 –º–∞–ª–µ–Ω—å–∫–∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é",
                             reply_markup=cancel_keyboard()
                             )


@dp.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 2 or len(name) > 20:
        await message.answer(
            "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –∏ –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤ üö´\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é",
                             reply_markup=cancel_keyboard()
                             )

        return

    data = await state.get_data()
    telegram_username = message.from_user.username or ''
    await dp["google_sheets_service"].add_user_to_db(message.from_user.id, data['login'], name, telegram_username)
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚òëÔ∏è",
        reply_markup=menu_keyboard())
    await state.clear()

@dp.callback_query(F.data == "cancel")
async def cancel(callback: CallbackQuery, state: FSMContext):
    if await check_ban(callback.from_user.id, callback=callback):
        return

    # current_state = await state.get_state()
    # logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π: {current_state}")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∞: {await state.get_state()}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é
    await callback.message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùé', reply_markup=menu_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "back")
async def back(callback: CallbackQuery, state: FSMContext):
    if await check_ban(callback.from_user.id, callback=callback):
        return

    # current_state = await state.get_state()
    # logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π: {current_state}")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {await state.get_state()}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é
    await callback.message.answer('–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é ‚Ü©Ô∏è', reply_markup=menu_keyboard())
    await callback.answer()




@dp.message()
async def handle_any_message(message: Message):
    if await check_ban(message.from_user.id, message=message):
        return

    user_data = await dp["google_sheets_service"].is_user_in_db(message.from_user.id)
    if user_data:
        await send_menu(message)
    else:
        await message.answer(
            '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üö´\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üìù',
            reply_markup=registration_keyboard()
        )
