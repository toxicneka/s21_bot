from aiogram.types import BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram import Bot
from html import escape
import asyncio

def menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üìù", callback_data="register")],
        [InlineKeyboardButton(text="–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ üìö", callback_data="links")],
        [InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –ø–∏—Ä–∞ –≤ —Ç–≥ üïµÔ∏è‚Äç‚ôÇÔ∏è", callback_data="search")],
        [InlineKeyboardButton(text="–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø—Ä–æ–≤–µ—Ä–∫–µ üîî", callback_data="ping")],
        [InlineKeyboardButton(text="–ö—Ç–æ –≤ –∫–∞–º–ø—É—Å–µ üëÄ", callback_data="campus")],
        [InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ ‚úâÔ∏è", callback_data="ref")]
    ])

def links_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="FAQ –®–∫–æ–ª—ã 21 üß†", callback_data="faq")],
        [InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ –®–∫–æ–ª—ã 21 üìñ", callback_data="rules")],
        [InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ –†–æ–∫–µ—Ç—á–∞—Ç–∞ üöÄ", callback_data="rocketchat")],
        [InlineKeyboardButton(text="–ì–∞–π–¥ –ø–æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ üìò", callback_data="internship_guide")],
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π üìï", callback_data="specialties")],
        [InlineKeyboardButton(text="GigaCode ü§ñ", callback_data="gigacode")],
        [InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ –æ–Ω–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–æ–∫ ü§º‚Äç‚ôÇÔ∏è", callback_data="p2p")],
        [InlineKeyboardButton(text="Code Review üìã", callback_data="codereview")],
        [InlineKeyboardButton(text="–í—ã–ø—É—Å–∫ —à–∫–æ–ª—ã üéì", callback_data="final")],
        [InlineKeyboardButton(text="–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–∏–Ω—ã üí∞", callback_data="coins")],
        [InlineKeyboardButton(text="–§–æ—Ä–º–∞ –≥–æ—Å—Ç—è üé´", callback_data="guests")],
        [InlineKeyboardButton(text="–ü–æ—á—Ç–∞ —è–∫—É—Ç—Å–∫–æ–≥–æ –∫–∞–º–ø—É—Å–∞ –®–∫–æ–ª—ã 21", callback_data="email")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="back")]
    ])

def registration_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")]
    ])

def re_registration_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="re_register")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel")]
    ])

def cancel_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    )

def broadcast_decision_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_confirm"),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")
        ]]
    )

async def send_menu(message: Message):
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é:',
        reply_markup=menu_keyboard()
    )

BANNED_USERS_FILE = "banned_users.txt"

def load_banned_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(BANNED_USERS_FILE, "r") as file:
            return set(map(int, file.read().splitlines()))
    except FileNotFoundError:
        return set()

def save_banned_users(banned_users):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    with open(BANNED_USERS_FILE, "w") as file:
        file.write("\n".join(map(str, banned_users)))

def add_banned_user(user_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö."""
    banned_users = load_banned_users()
    banned_users.add(user_id)
    save_banned_users(banned_users)

def remove_banned_user(user_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö."""
    banned_users = load_banned_users()
    banned_users.discard(user_id)
    save_banned_users(banned_users)

def is_user_banned(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    return user_id in load_banned_users()

async def check_ban(user_id: int, message: Message = None, callback = None):
    if is_user_banned(user_id):
        if message:
            await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ üö´")
        elif callback:
            await callback.message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ üö´")
            await callback.answer()
        return True
    return False

async def send_media_preview(media_message: Message, chat_id: int):
    if media_message.text:
        await media_message.bot.send_message(chat_id, media_message.text)
    elif media_message.photo:
        await media_message.bot.send_photo(chat_id, media_message.photo[-1].file_id, caption=media_message.caption)
    elif media_message.document:
        await media_message.bot.send_document(chat_id, media_message.document.file_id, caption=media_message.caption)
    elif media_message.video:
        await media_message.bot.send_video(chat_id, media_message.video.file_id, caption=media_message.caption)

async def set_main_menu(bot: Bot):
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ menu
    main_menu_commands = [
        BotCommand(command='/links',
                   description='–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ üìö'),
        BotCommand(command='/search',
                   description='–ü–æ–∏—Å–∫ –ø–∏—Ä–∞ –≤ —Ç–≥ üïµÔ∏è‚Äç‚ôÇÔ∏è'),
        BotCommand(command='/ping',
                   description='–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø—Ä–æ–≤–µ—Ä–∫–µ üîî'),
        BotCommand(command='/campus',
                   description='–ö—Ç–æ –≤ –∫–∞–º–ø—É—Å–µ üëÄ'),
        BotCommand(command='/ref',
                   description='–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ ‚úâÔ∏è'),
        BotCommand(command='/wanted',
                   description='–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ä–∞ üêà'),
    ]

    await bot.set_my_commands(main_menu_commands)
